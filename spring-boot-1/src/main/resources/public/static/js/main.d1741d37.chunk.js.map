{"version":3,"sources":["pages/about.jsx","pages/home.jsx","pages/main.jsx","components/app.jsx","serviceWorker.js","index.js"],"names":["About","type","Component","Home","Main","className","to","App","axios","get","then","response","console","log","catch","error","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gPAEqBA,E,iLAGb,OACI,qCAEI,uBAAQC,KAAK,WAAb,gB,GANmBC,aCAdC,E,iLAGb,OACI,yC,GAJsBD,a,yBCMbE,E,iLAIb,OACI,yBAAKC,UAAU,aACX,8DACA,6BACA,yBAAKA,UAAU,QACX,yBAAKA,UAAU,OACX,kBAAC,IAAD,CAASA,UAAU,OAAOC,GAAG,UAA7B,SACA,kBAAC,IAAD,CAASD,UAAU,OAAOC,GAAG,SAA7B,e,GAXUJ,aCCbK,E,4LAGbC,IAAMC,IAAI,UACLC,MAAK,SAAUC,GACZC,QAAQC,IAAIF,MAEfG,OAAM,SAAUC,GACbH,QAAQC,IAAIE,Q,+BAKpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWjB,IAChC,kBAAC,IAAD,CAAOgB,KAAK,QAAQC,UAAWd,IAC/B,kBAAC,IAAD,CAAOa,KAAK,QAAQC,UAAWb,IAC/B,kBAAC,IAAD,CAAUE,GAAG,e,GAlBIJ,aCGbgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAED,kBAAC,IAAD,KACI,kBAAC,EAAD,OAGRC,SAASC,eAAe,SDmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.d1741d37.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport { Button } from 'antd-mobile';\r\nexport default class About extends Component{\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                about\r\n                <Button type=\"primary\">primary</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React,{Component} from 'react'\r\n\r\nexport default class Home extends Component{\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                home\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React,{Component} from 'react'\r\nimport {NavLink,Switch,Redirect,Route} from 'react-router-dom'\r\nimport '../components/app.css'\r\n\r\nimport About from '../pages/about'\r\nimport Home from '../pages/home'\r\nimport axios from 'axios'\r\n\r\nexport default class Main extends Component{\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <h2>react 路由测试</h2>\r\n                <hr/>\r\n                <div className=\"main\">\r\n                    <div className=\"nav\">\r\n                        <NavLink className=\"item\" to=\"/about\">About</NavLink>\r\n                        <NavLink className=\"item\" to=\"/home\">Home</NavLink>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React,{Component} from 'react'\r\nimport {NavLink,Switch,Redirect,Route} from 'react-router-dom'\r\nimport './app.css'\r\n\r\nimport About from '../pages/about'\r\nimport Home from '../pages/home'\r\nimport Main from '../pages/main'\r\nimport axios from 'axios'\r\n\r\nexport default class App extends Component{\r\n\r\n    componentDidMount() {\r\n        axios.get('/hello')\r\n            .then(function (response) {\r\n                console.log(response);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Switch>\r\n                <Route path=\"/about\" component={About}/>\r\n                <Route path=\"/home\" component={Home}/>\r\n                <Route path=\"/main\" component={Main}/>\r\n                <Redirect to=\"/main\"/>\r\n            </Switch>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter,HashRouter} from 'react-router-dom'\n\nReactDOM.render(\n    (\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    ),\n    document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}